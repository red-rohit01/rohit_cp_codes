class Node{
  public:
  vector<Node*>children;
  bool ew=false;
  Node()
  {
      children.resize(26);
      for(auto &it:children) it=nullptr;
      ew=false;
  }
};

class Trie {
  public:
    Node* root;
    Trie() {
        root=new Node();
    }

    void insert(string &word) {
        // insert word into Trie
        Node* ptr=root;
        int len=word.size();
        for(int i=0;i<len;++i)
        {
            int ind=word[i]-'a';
            if(ptr->children[ind]==nullptr)
            {
                Node* temp=new Node();
                ptr->children[ind]=temp;
            }
            ptr=ptr->children[ind];
        }
        ptr->ew=true;
    }

    bool search(string &word) {
        // search word in the Trie
        Node* ptr=root;
        int len=word.size();
        for(int i=0;i<len;++i)
        {
            int ind=word[i]-'a';
            if(ptr->children[ind]==nullptr)
            {
                return false;
            }
            ptr=ptr->children[ind];
        }
        return ptr->ew;
    }

    bool isPrefix(string &word) {
        // search prefix word in the Trie
        Node* ptr=root;
        int len=word.size();
        for(int i=0;i<len;++i)
        {
            int ind=word[i]-'a';
            if(ptr->children[ind]==nullptr)
            {
                return false;
            }
            ptr=ptr->children[ind];
        }
        return true;
    }
};
