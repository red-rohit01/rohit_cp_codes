#include<bits/stdc++.h>
using namespace std;

struct Node {
	Node *next[2];

	Node()
  {
		 for(int i=0; i<2; i++) next[i] = NULL;
	}
};

void insert(Node *curr, int x, int i) {
	if(i == -1) return;
	if((x & (1<<i)) > 0)
  {
		if(curr->next[1] == NULL)
    {
			curr->next[1] = new Node();
		}
		insert(curr->next[1], x, i-1);
	}
  else
  {
		if(curr->next[0] == NULL)
    {
			curr->next[0] = new Node();
		}
		insert(curr->next[0], x, i-1);
	}

}

int search(Node *curr, int x, int i) {
	if(i == -1) 
  {
		return 0;
	}

	if((x & (1<<i)) > 0)
  {
		if(curr->next[0] != NULL) {
			return ((1<<i) + search(curr->next[0], x, i-1));
		} 
    else
    {
			return search(curr->next[1], x, i-1);
		}
	} 
  else
  {
		if(curr->next[1] != NULL)
    {
			return ((1<<i) + search(curr->next[1], x, i-1));
		} 
    else
    {
			return search(curr->next[0], x, i-1);
		}
	}
}

int main() {
	int n, m;
	cin>>n;
	int arr1[n];
	for(int i=0; i<n; i++) cin>>arr1[i];

	cin>>m;
	int arr2[m];
	for(int i=0; i<m; i++) cin>>arr2[i];

	Node *root = new Node();
	int M = 30;
	for(int i=0; i<n; i++) {
		insert(root, arr1[i], M);
	}

	int ans = 0;

	for(int i=0; i<m; i++) {
		ans = max(ans, search(root, arr2[i], M));
	}

	cout<<ans<<"\n";

	return 0;
}
