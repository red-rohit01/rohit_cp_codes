#include <bits/stdc++.h>
using namespace std;

class DisjointSet {
    vector<int> rank, parent, size;
public:
    DisjointSet(int n) {
        rank.resize(n + 1, 0);
        parent.resize(n + 1);
        size.resize(n + 1);
        for (int i = 0; i <= n; i++) {
            parent[i] = i;
            size[i] = 1;
        }
    }

    int findUPar(int node) {
        if (node == parent[node])
            return node;
        return parent[node] = findUPar(parent[node]);
    }

    void unionByRank(int u, int v) {
        int ulp_u = findUPar(u);
        int ulp_v = findUPar(v);
        if (ulp_u == ulp_v) return;
        if (rank[ulp_u] < rank[ulp_v]) {
            parent[ulp_u] = ulp_v;
        }
        else if (rank[ulp_v] < rank[ulp_u]) {
            parent[ulp_v] = ulp_u;
        }
        else {
            parent[ulp_v] = ulp_u;
            rank[ulp_u]++;
        }
    }

    void unionBySize(int u, int v) {
        int ulp_u = findUPar(u);
        int ulp_v = findUPar(v);
        if (ulp_u == ulp_v) return;
        if (size[ulp_u] < size[ulp_v]) {
            parent[ulp_u] = ulp_v;
            size[ulp_v] += size[ulp_u];
        }
        else {
            parent[ulp_v] = ulp_u;
            size[ulp_u] += size[ulp_v];
        }
    }
};


// Soham Mukherjee DSU

#include<bits/stdc++.h>

class DSU{
	vector<int> parent;
	vector<int> subtree;
	int N;
public:
	DSU(int n){
		N = n;
		parent = vector<int>(n+1, 0);
		subtree = vector<int>(n+1, 1);

		for(int i=1; i<=n; i++) parent[i] = i;
	}

	int findRoot(int x){
		while(x!=parent[x]){
			parent[x] = parent[parent[x]];
			x = parent[x];
		}

		return x;
	}

	bool combine(int u, int v){
		int ru = findRoot(u);
		int rv = findRoot(v);
		if(ru == rv) return false;
		if(subtree[ru] > subtree[rv]){
			parent[rv] = ru;
			subtree[ru] += subtree[rv];
		} else{
			parent[ru] = rv;
			subtree[rv] += subtree[ru];
		}

		return true; 
	}
};

