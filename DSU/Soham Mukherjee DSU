#include<bits/stdc++.h>

class DSU{
	vector<int> parent;
	vector<int> subtree;
	int N;
public:
	DSU(int n){
		N = n;
		parent = vector<int>(n+1, 0);
		subtree = vector<int>(n+1, 1);

		for(int i=1; i<=n; i++) parent[i] = i;
	}

	int findRoot(int x){
		while(x!=parent[x]){
			parent[x] = parent[parent[x]];
			x = parent[x];
		}

		return x;
	}

	bool combine(int u, int v){
		int ru = findRoot(u);
		int rv = findRoot(v);
		if(ru == rv) return false;
		if(subtree[ru] > subtree[rv]){
			parent[rv] = ru;
			subtree[ru] += subtree[rv];
		} else{
			parent[ru] = rv;
			subtree[rv] += subtree[ru];
		}

		return true; 
	}
};
